2:I[5613,[],""]
3:I[31778,[],""]
4:I[25250,["8792","static/chunks/8792-3277e8775fd13922.js","7894","static/chunks/app/(contents)/layout-53bb231bc47e6df0.js"],""]
5:I[52148,["8792","static/chunks/8792-3277e8775fd13922.js","7894","static/chunks/app/(contents)/layout-53bb231bc47e6df0.js"],""]
6:T20d5,    
![image](https://github.com/nerd-animals/na-log/assets/144116866/00c1a4d7-e7fa-495c-b4c8-b37b5b2c9d65)

## 🤔 정보처리기사?

<aside>📝 소프트웨어 개발 관련 자격증으로, 정보시스템의 생명주기 전반에 걸친 프로젝트 업무를 수행하는 직무로서 계획수립, 분석, 설계, 구현, 시험, 운영, 유지보수 등의 업무를 수행할 수 있는 능력을 검증하는 시험
</aside>

**컴퓨터**하면 가장 먼저 생각나는 기사 자격증이다.
비전공이든 전공이든 **가산점** 때문에 많이 따는 자격증!

## 📌 결과

<figure>
<img src="https://github.com/nerd-animals/na-log/assets/144116866/561a4343-6be0-4170-80b3-4569c4af0f46"/>
<figcaption>2024년 2회, 2024년 5월 24일(금)</figcaption>
</figure>

### 🧐 왜 준비했는가?

> **CS(Computer Sciecne)** 관련 지식을 습득했다는 증명을 할 수 있는 자격증이기 때문이다.
**(비전공, 노베이스 기준)**
> 

블로그 개발을 하면서도 CS 기본 지식이 부족하다는 생각을 했고, 겸사겸사 자격증도 따고, CS 지식도 얻고 싶었다. 특히, CS는 너무 방대해서 어디서부터 손을 대야할지 잘 모르는 경우가 많았다. 나와 같은 비전공자분들도 이런 상황이라면 한번 도전해보는 것도 좋을 것 같다.

개발자는 자격증을 잘 안본다고는 하지만, 정처기랑 SQLD는 내가 생각하는 **금융권**과 맞다고 생각돼서 취득하려고 한다.

### ✨ 합격 기준

![image](https://github.com/nerd-animals/na-log/assets/144116866/a902c016-62f1-44f7-8bd4-c9ce2192f1fe)
**객관식** 총 **100문항/100점 만점**의 필기시험으로 진행된다.

**총 평균 60점 이상을 획득**하면 합격이며, 단 **과목별 40점 미만**(8개 이상 맞춰야함)이라면 **과락**이다.

---

## 📚 준비 과정

### 📍 시험 일정

<figure>
<img src="https://github.com/nerd-animals/na-log/assets/144116866/8197e1ac-2963-4592-a883-505bdd2b5256"/>
<figcaption>2024년 기사 자격증 시험일정</figcaption>
</figure>


### 🗓️ 준비 기간

> 2024.04.26.(금) ~ 24.05.24.(금) (4주)
> 

개인적으로 시간이 많으면 **넉넉히 4주**, **없다면 2주 만**으로도 괜찮을 것 같다.

- 1주 : 시나공 정보처리기사 필기 기본서 (📌시간이 없다면 **제외해도 됨**)
- 2주 ~ 3주 : 기출 (📌**2주**라면 **기출**부터!)
- 4주 : 정리 및 기출 (⭐️**핵심**)

### 🧑🏻‍💻 공부 방법

![image](https://github.com/nerd-animals/na-log/assets/144116866/3091f10d-d8f1-4033-8898-993f1b6e8d48)

- 1주 : 시나공 정보처리기사 필기 기본서
    📌시간 많고, CS를 한번 공부해보고 싶은 사람에게 추천!
    하루에 CHAPTER 하나씩 진도를 나갔다. (총 5 CHAPTER)
    
![image](https://github.com/nerd-animals/na-log/assets/144116866/e4f5d400-efbd-4c23-8f36-963cc373ae47)
- 2주 ~ 3주 : 기출
   [흥달쌤](https://www.youtube.com/watch?v=voOb2eCrJV8&list=PLniy99c_7ZfpebxrkxR5rmzzfYgCxp5ql)
    📌**20년 이후** 영상 보기(20년 이후 NCS 기반으로 개편)
    하루에 1회/영상 5개(1.5배속)씩 보려고 했고, 보면서 위 사진처럼 정리했다.
    다 못 봤을 때는 2일에 1회씩 보기도 했다.

![image](https://github.com/nerd-animals/na-log/assets/144116866/71de3183-1d40-4104-b820-5324da161993)
- 4주 : 정리 및 기출
    맨 위에 두 모의고사는 시험 바로 직전에 푼 것 (푼 데까지 채점한 것이니 무시해도 됨)
    
    [CBT](https://www.comcbt.com/)
    
    ⭐️**합격 핵심!** 이것만 해도 반은 먹고 간다.
    흥달쌤과 기출에서 자주 나오는 키워드를 요약 정리(아래 🍯자료 공유 탭 참고)했다.
    CBT에서 오답모음집과 년도별 모의고사도 풀었다.
    (But! **1회씩 기출**을 푸는 게 좋아보임 → 오답모음집, 년도별 모의고사는 같은 문제 중복인 경우가 있음)

### 🔔 응시 팁

- 시험 **20분 전까지** 입실 완료
    - 이때부터 **아무것도 볼 수 없음**
    (폰으로 보고 있어서 전자기기 막은 건 기억나는데, 혹시 모르니 **종이 프린트**해가면 좋을 것 같음)
    - **CBT 형식**이라 다 풀면 **바로 퇴실** 가능(**시험 사전 점수 바로 공개**)
- **경남서부국가자격시험장**
    - 네이버 지도에 ‘**한국산업인력공단 경남서부지사**’ 검색
    - 앞에 주차장 자리 많긴 함(본인은 20-30분 전 갔는데 몇 자리 없었음)
    → 그래도 도매시장 쪽에 주차장이 많으니 주차 걱정은 안해도 될 듯!
    - **근처에 편의점 없으니** 물/초콜릿 등은 미리 사갈 것!

## 🧷 접수 팁

### 💰 응시료

19,400원 (필기)

---

- Q-net 어플 설치(인터넷 오류 발생 방지)
- 시험 원서 접수 **3일 전 14시**부터 **전일 24시**까지 : 시험 사전 입력 하기
    - Q-net 공지사항 → 시험 장소 1~3순위 체크 (시험 장소는 당일날 가능)

![image](https://github.com/nerd-animals/na-log/assets/144116866/ce588b6c-4c4b-4ef0-a8bd-a7032dadde20)


### 접수 과정

1. **시험 접수 20분 전**에 미리 어플과 웹페이지 로그인 후, `'마이페이지'` **→** `'원서접수 내역'`
2. **10시 정각**(‘**네이비즘**’ 활용)이 되면 **새로고침 후**, `‘장소선택 및 결제하기’` 버튼 클릭
(사전입력을 했다면, 여기서부터 접수 시작
~~'원서접수신청'~~: 첫 페이지로 되돌아가니 반드시 `‘원서접수 내역'`에서 시작!)
   ![image](https://github.com/nerd-animals/na-log/assets/144116866/19260dbd-0ed1-4070-a869-a965b50263f5)    
    - 청년 국가기술자격시험 **응시료 50% 할인**도 있으니, **해당된다면 꼭 할인받기!**
        [공지사항 상세 | Q-net](https://www.q-net.or.kr/man004.do?id=man00402&gSite=Q&gld=&ARTL_SEQ=5212578&BOARD_ID=Q001&notiType=10)
        
3. **무통장입금**이 가장 빠르고 편하니 참고!

---

## 🍯 자료 공유

[정보처리기사 필기 정리본](https://otterbit.notion.site/616e3f80271446838960fb327c8d60f1?pvs=4)

1. 필기 정리본에 나만의 정리를 하고 싶거나
2. 시간이 너무 없을 때

1과목부터 5과목의 **핵심 및 기출 키워드**를 정리한 자료니 활용해보시길 바란다.
>공유는 가능하나 **상업적 이용 및 무단 수정은 하지 말아주세요!**
>오타나 잘못된 내용이 있다면 언제든지 블로그 및 유튜브 댓글에 달아주세요!


---

## ✨ 후기

시험 시간은 **과목당 30분**으로 **총 150분**, 공부를 조금이라도 했다면 널널한 편이다.
시험 문제 또한 문제은행 형식이라 기출을 많이 돌려보는 것이 좋다.
(그렇다고 답을 외우기보다는 **답의 이유, 근거**가 무엇인지 이해하는 것이 중요!)

시간을 다 쓰고 나오는 편인데, 일정이 있어 마킹 및 답 체크 목적으로 한 번 다시 보고 총 **40분 뒤**에 퇴실했다.

### 과목

- **1~3과목**
점수로도 알겠지만, 비전공자는 1~3과목에서 **높은 점수를 취득**하는 것을 목표로 하는 것이 좋다.

  컴퓨터의 도덕과목이라고 생각하면서 풀었다.
  결국에는 프로그래밍이라는 게 특정 목적 중 사용자를 편리하기 위한 시스템을 개발하려는 목적이 있으니, 너무 이상한 답은 오답일 확률이 높다. (속도가 느리다거나, 사용자를 배제한다거나, 데이터를 많이 쓴다거나 등등)

  알면 좋지만, 모른다면 이런 느낌을 생각하고 답을 찍는 것이 좋다.

- **4과목**
과락(40점 미만)만 면해보자…!
나는 python과 javascript를 다룰 줄 알아 java나 c++에도 괜찮을 줄 알았는데, 생각보다 문제는 많이 어려웠다.
`python`이 그나마 직관적이라고 생각한다. python 문제는 맞춰보도록 해보자.

- **5과목**
너도, 과락(40점 미만)만 면해보자…!
신기술이나 외우는 문제가 많아서 어렵긴 하다. 모르겠으면 하나로 밀자.

---
![cat_coding](https://github.com/nerd-animals/na-log/assets/144116866/7eccf1c8-0d35-481f-934c-e5bcf9f2326f)
<center>정처기 필기, 2주 만에도 합격할 수 있다! 실기도 파이팅!</center>7:T23c1,<img src="https://github.com/nerd-animals/na-log/assets/144116866/3e34aaea-d004-4f51-94f1-a98682ac6c83"/>

## 🤔 SQLD?

<aside>📝 SQL 개발자(SQLD, SQL Developer)란 데이터베이스와 데이터 모델링에 대한 지식을 바탕으로 응용 소프트웨어를 개발하면서 데이터를 조작하고 추출하는데 있어서 정확하고 최적의 성능을 발휘하는 SQL을 작성할 수 있는 개발자를 말한다.
</aside>

## 📌 결과

<figure>
<img src="https://github.com/nerd-animals/na-log/assets/144116866/5480d115-211c-4142-9391-c89a6f856d49"/>
<figcaption>제 52회, 2024년 3월 9일 (개정 이후 첫 시험)</figcaption>
</figure>


### 🧐 왜 준비했는가?

![우대사항](https://github.com/nerd-animals/na-log/assets/144116866/dc897a3b-1877-4bd4-bdfa-5a14c3365499)

비전공 개발자로서 개발 자격증이 하나도 없었다. **(비전공, 노베이스)**

금융권을 준비하다보니 우대사항으로 SQLP가, 코딩 테스트에 SQL 문제가 출제되기도 한다.
(SQLP를 취득하려면 일단 SQLD가 필요하다.)

### ✨ 합격 기준

![합격기준1](https://github.com/nerd-animals/na-log/assets/144116866/e632470c-d9ab-40a0-a344-3f222901550a)
![합격기준2](https://github.com/nerd-animals/na-log/assets/144116866/b788ccb8-85cb-407b-aa62-b0a8b46b298f)
**객관식** 총 **50문항/100점 만점**(문제당 배점 각 **2점**)의 필기시험으로 진행된다.
(**제52회**부터 **객관식**으로만 50문항으로 변경, 개정됐다.) ⇒ **개정되고 첫 시험🥲**

총 60점(30문제) 이상을 획득하면 합격이며, 단 과목별 40% 미만이라면 과락이다.

### 📄 과목별 주요항목

[데이터자격시험](https://www.dataq.or.kr/www/board/view.do)

![과목별주요항목](https://github.com/nerd-animals/na-log/assets/144116866/ee93ed6b-228e-4f75-abe4-6bf5ea370321)
---

## 📚 준비 과정

### 📍 시험 일정

<figure>
<img src="https://github.com/nerd-animals/na-log/assets/144116866/67d77caf-c976-4835-9aa9-2b8339cccbe3">
<figcaption>2024년 시험 일정</figcaption>
</figure>

한국데이터산업진흥원 주관으로 **연 4회** 시행 (분기에 1회 접수)

<aside>🖥️◆원서접수 시간 : 접수 시작일 10:00 ~ 접수 마감일 18:00
    ◆수험표 발행 시간 : 시험일 2주 전(휴일인 경우 전일) 금요일 16시
    ◆결과발표 시간 : 10:00 (사정에 따라 변동 가능)
    ◆시험 시작시간 : 10:00
    ◆사전점수 공개 : 공개시작일 16:00 ~ 공개최종일 18:00
    (접수된 재검토 신청은 검토기간을 거쳐 결과발표일에 통보)
</aside>

### 🗓️ 준비 기간

> 제52회 : 2024년 1월 29일(월) ~ 3월 9일(토)
> 
- 1주 : 개념정리
    유선배 SQLD 책을 보면서 하루에 1시간 씩 개념정리하면서 감 익히기
    (총 5개 CHAPTER를 하루에 하나씩 개념정리)
    
- 2주 ~ 3주 : 기출문제
(시간 없다면 이것만 해도 될듯)
    [https://yunamom.tistory.com/category/IT자격증 공부/SQLD 기출문제](https://yunamom.tistory.com/category/IT%EC%9E%90%EA%B2%A9%EC%A6%9D%20%EA%B3%B5%EB%B6%80/SQLD%20%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C)
    구글에 SQLD 정리본을 공유받아 노랭이 책과 기출 풀면서 틀렸던 내용 옆에 메모
    

### 🧑🏻‍💻 공부 방법

네이버 [데이터 전문가 포럼](https://cafe.naver.com/sqlpd) 이라는 카페가 가장 유명해서 정보를 취합했다.

<img src="https://github.com/nerd-animals/na-log/assets/144116866/c38096fc-3a4b-43a6-a4f1-4b119e09bf4d" />

- 유선배 SQLD 책 : 비전공자한테 개념부터 공부하기 좋다고 해서 구매
    개정 내용인 PIVOT/UNPIVOT, 정규표현식에 대한 내용이 없다.
    다행히 개정 첫 시험(52회)에는 출제되지 않았다.
    이 점 참고하여 구매하거나, 구매하더라도 따로 공부하는 것을 추천한다.
    
    [홍쌤의 데이터랩](https://www.youtube.com/@hdatalab)
    해당 유튜브도 많이 보시던데, 나는 몰라서 보진 못했다.
    
    PIVOT/UNPIVOT, 정규표현식에 대한 정보를 찾고싶으면 `SQLD 2과목 PART2. SQL 활용 완벽 정리`를 보면 될 것 같다.

<img src="https://github.com/nerd-animals/na-log/assets/144116866/c525d66d-e24f-4e01-971c-418f5ce02ab4"/>

- 노랭이 : SQL하면 유명한 책
    실제로도 도움이 많이 됐다. 시험과 비슷하거나 조금 더 어려운 수준이다.
    마지막 과목 `III.(SQL 고급활용 및 튜닝)`은 SQLP 과목이라 풀지 않아도 된다.
    

### 🔔 응시 팁

- 응시료 : 50,000원

![접수](https://github.com/nerd-animals/na-log/assets/144116866/48f22179-ba5d-4a56-bfcd-64f9a38e12e2)
- 지역
    - 서울, 경기도, 인천, 대전, 대구, 부산, 광주, 강원도, 제주도
    - 제52회 SQLD (대구) 성지중학교
        - 이곡역에서 가깝고, 바로 앞에 편의점이 있으니 물이나 초콜릿 구매 가능
- 준비물 및 알아야할 것
    - 신분증 / 컴퓨터 싸인펜 혹은 볼펜    
    - 08:30부터 입실 가능
    09:30까지 입실 완료
    09시 30분 ~ 10시 : 신분증 검사 및 시험 대기
    - 조기 퇴실 : 10시 30분부터 시험지를 제출하고 퇴실가능
    - 시작 몇 분 전부터는 태블릿 및 전자기기를 종료해야해서 여분으로 **자료 프린트**를 해가는 것을 추천

---

## 🍯 자료 공유

[SQLD 이론 요약 정리 PDF](https://yurimac.tistory.com/40)

---

## ✨ 후기

시험 시간을 보통 다 채우는 편인데, 3번 정도 다 훑어봐서 60분 정도 보고, 조기퇴실했다.

### 주관식 → 객관식

이번 회부터 주관식 문제 8개 정도가 아예 없고, 객관식 문제로만 50문제 출제된다고 했다.

하지만! 오히려 객관식이니 모르는 문제는 찍을 기회가 있으니까 더 쉬워진 게 아닌가하는 생각이 들었다.
(기출에서도 주관식이 그다지 어려운 문제가 나오지 않았음)

### 과목

SQL 최적화 기본 원리가 SQLP로 이동돼서 난이도 자체는 예전에 비해 낮아진 게 아닌가 싶다.
개정 과목인 `PIVOT/UNPIVOT`, 정규 표현식에 대한 내용은 출제되지 않았다.

---

## ⭐️ 필수

<aside>SQLD 이론 요약 정리 PDF나 유튜브 강의를 통하여 꼭 해당 키워드는 이해 및 암기하자!
</aside>

### **1과목 - 데이터 모델링의 이해**

> **암기**가 필수!
> 
- **엔터티, 속성, 관계, 식별자의 개념과 정의**
    - 분류 기준에 따른 6가지 엔터티
    - 분류 기준에 따른 속성
    - 주식별자 특성 종류 및 특성별 의미
    - 식별관계/비식별관계 차이
- **모델링, 스키마 뜻/특징**
    - 외부, 내부, 개념 스키마
    - 모델링 특징, 단계
- **ERD 그리기 (1:1, 1:다 등등)**
    - ERD 선이 각각 의미하는 것
- **정규화**
    - 제1정규화, 제2정규화, 제3정규화, 반정규화 의미 (예시 주어지고 이게 무슨 정규화냐~)
- **NULL**
    - 의미
    - 연산 시 NULL, 제외 (가로 연산, 세로 연산)

### **2과목 - SQL 기본 및 활용**

> **이해**가 필수! (암기도 해야한다)
> 
- **SELECT문 실행 순서**
    - FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY
    - 순서를 알아야 문제를 풀 수 있음
- **함수**
    - **숫자 함수** 차이 : ABS, SIGN, ROUND, TRUNC …
    - **NULL 관련 함수** 차이 : NVL, NVL2, NULLIF, COALESCE
    - 문자 함수, 날짜 함수, CASE WHEN 구문 등도 중요하다.
- **JOIN** : INNER JOIN, OUTER JOIN, NATURAL JOIN, CROSS JOIN
- **그룹 함수**
    - ROLLUP, CUBE, GROUPING SETS
    - 그룹핑, 순서가 어떻게 되는지
- **순위함수**
    - RANK, DENSE_RANK, ROW_NUMBER
- **비율함수**
    - RATIO_TO_REPORT, PERCENT_RANK, CUME_DIST, NTILE

- **SQL 연산자**
    
    
    | 연산자 | 의미 | 예시 |
    | --- | --- | --- |
    | BETWEEN A AND B | A와 B의 사이(A, B 포함) | where col between 1 and 10 |
    | LIKE ‘비교 문자열’ | 비교 문자열을 포함<br>`%`는 문자열을 의미<br>`_`는 하나의 문자를 의미<br>`_` 혹은 `%` 기호가 포함된 문자 검색 시 ESCAPE 지정 | where col like ‘방탄%’<br>where col like ‘%소년단’<br>where col like ‘%탄소년%’<br>where col like ‘방_소%’<br>where col like ‘%#%%’ escape ‘#’ |
    | IN (LIST) | LIST 중 하나와 일치 | where col in (1, 3, 5) |
    | IS NULL | NULL 값 | where col is null |

- **관리 구문**
    
    
    | 구분 | 종류 |
    | --- | --- |
    | DML(Data Manipulation) | INSERT, UPDATE, DELETE, MERGE, SELECT |
    | TCL(Transcation Control) | COMMIT, ROLLBACK, SAVEPOINT |
    | DDL(Data Definition) | CREATE, DROP, MODIFY(오라클), ALTER(SQL서버), RENAME, TRUNCATE |
    | DCL(Data Control) | GRANK, REVOKE |

- **트랜잭션**
    - 특징 암기 및 이해


---

![파이팅](https://github.com/nerd-animals/na-log/assets/144116866/43a4995b-6063-435d-a585-745b6c02d14b)

<center> SQLD, 할 수 있다. 파이팅!</center>8:Tde1,
## 개요

자료구조를 공부하던 차에 ADT라는 개념을 보게 되었다.
Abstract Data Type, 직역하면 추상 자료형인데 무엇인지 알아보자.

----

## ADT?

단어 의미 그대로 추상적이다.
여기서 추상적이라는 의미는, 상세한 내용은 제외하고 중요한 것만 표현한다는 뜻이다.
즉, 자료구조의 **대표적인 특징**만 표현한 것이다!

이를 통해 자료구조가 어떤 기능을 제공하는지 쉽게 확인할 수 있는데,
사용자 입장에서는 **사용 설명서**, 개발자 입장에서는 **기능적 요구사항**이 된다.
중요한 내용만 표현함으로써 자료구조를 간단하게 표현할 수 있다.

세부 구현은 표현하지 않기 때문에 어떤 방식으로 구현해도 괜찮다.
ADT의 내용만 충족시키면 된다!

## 🦝

자료구조의 **최소 Spec**을 표현한 문서라고 느껴졌다.
핵심만 표현한다고 하지만, 핵심 사항이라는 것이 대체 뭘까?
이해관계자가 지켜줘야 할 규칙 같은 것이겠지.

개발자 입장에서는 반드시 지켜야 할 요구사항이라고 볼 수 있겠다.

----

## 예시

대표적인 예시로 **Queue**와 **Stack**이 있다.
ADT의 개념을 모를 때는 뭔가 모를 이질감이 있었는데,
자료구조라기엔 추상적인 내용이어서 불편함을 느꼈던 것 같다.

각각에 대한 ADT를 작성해보자.

### 1. Queue

Queue는 `FIFO`(First In, First Out)를 만족하는 자료구조이다.
즉, 먼저 들어온 데이터가 먼저 나갈 수 있는 기능을 제공한다.

따라서, 아래와 같은 ADT를 작성할 수 있다.

```bash
- push(item) : item을 Queue에 넣는다.
- pop(): 가장 먼저 들어온 item을 반환한다.
- isEmpty(): 현재 Queue에 item의 존재 유무를 반환한다.
- size(): 현재 가지고 있는 item의 갯수를 반환한다.
```

### 2. Stack

Stack은 `LIFO`(Last In, First Out)을 만족하는 자료구조다.
즉, 나중에 들어온 데이터가 먼저 나갈 수 있는 기능을 제공한다.

따라서 아래와 같은 ADT를 작성할 수 있다.

```bash
- push(item) : item을 Stack에 넣는다.
- pop(): 가장 마지막에 들어온 item을 반환한다.
- isEmpty(): 현재 Stack에 item의 존재 유무를 반환한다.
- size(): 현재 가지고 있는 item의 갯수를 반환한다.
```

## 🦝

python 문서를 참고하여 간단히 작성해봤다.
3분정도 걸렸나?
실제로는 더 자세히 작성해야겠지.

현업에서는 이해관계자 간의 협의 과정이 추가될 것이다.
3분이 3일이 될지도..

----

## 정리

ADT를 간단히 작성해봤는데, 매우 직관적임을 알 수 있다.
왜 추상적이라는 표현을 썼는지 알 수 있을 정도로 대충 작성된 느낌이다..ㅋㅋ..
그럼에도 ADT를 통해서 얻을 수 있는 이점이 있다.

- 직관적으로 자료구조의 기능을 확인할 수 있다.
- 구현해야 할 기능을 한 눈에 볼 수 있다.

## 🦝

ADT가 정말로 도움이 될까?
개발 초기였다면 크게 와닿지 않았을 것 같지만, 지금은 협업 측면에서 꼭 필요할 것 같다.

협업을 하다보면, 생각을 맞추는 것이 의외로 어렵다는 것을 느낀다.
ADT는 팀원의 오해 그리고 나의 실수를 방지하는데에 도움이 된다.

간혹, 말이 꼬여서 마치 내가 잘못한 것처럼 될 때가 있는데... 그런 불편한 상황에서는 정말 큰 도움이 되겠다.
(~~남 탓을 할 수 있다.~~)9:T2af1,
## 개요

<aside>📝 css와 sass(scss), 이름은 비슷한데 어떤 차이가 있을까?
</aside>


![css 지맘대로 작동할 때](https://github.com/nerd-animals/na-log/assets/144116866/a77ec6df-9d6e-499f-940e-52da6f30fe22)

CSS를 계속해서 쓰다보면 정신이 없다. \
수정하려고 하니까 밑에 작성한 코드 때문에 우선순위가 밀려 내 생각대로 적용도 잘 안되고, \
`id`나 `class`가 점점 늘어남에 따라 css 파일도 엄청 길어지고… 머리가 아프다!

프론트엔드는 또 CSS를 잘 다뤄봐야 수정할 때 빠르고 정확하게 할 수 있지 않겠는가!

그래서, 이번 시간에는 이 CSS의 단점을 메워줄 수 있는 SASS, SCSS에 대해 알아보려고 한다.

---

## CSS란?

### CSS

**Cascading Style Sheets - 종속형 시트**

**Cascading**은 폭포, **위에서 아래로 쏟아지는**이라는 뜻을 가진 단어이며, 이 Cascading은 CSS에서 가장 중요한 스타일 적용 규칙이기도 하다. 자세한 내용은 위 링크 참고하자.

- 특징
    - 작업, 코드가 많아질수록 유지보수 측면에서 굉장히 불편하다.
    - 선택자를 만들 때 매번 불필요한 부모 요소 선택자를 적어야 한다.
    - function같은 게 없어서, 자동화하기 어렵고 수동으로 일일이 변경해줘야 한다.

## SASS, SCSS란?

저 단점들을 보완하기 위해 ~~혜성처럼 등장한~~ SASS, SCSS를 한번 알아보자.

### CSS 전처리기

SASS, SCSS가 무엇인지 들어가기에 앞서 먼저 **CSS 전처리기**가 무엇인지 알아보려고 한다.

전처리기가 가진 특별한 syntax로 CSS를 생성하도록 하는 프로그램이다.

- 특징
    - CSS 문서의 양을 효율적으로 처리해주고, 관리해준다.
    - CSS를 편리하게 사용할 수 있도록 하는 기능들이 있는 확장판 스크립트 **언어**
    - 웹서버는 CSS만 인식하는 바보라 각 CSS 전처리기에 맞는 Compiler를 사용해줘야 알아먹는다. 즉, 직접 동작시키거나 **CSS 대체 언어는 아니라는 뜻.**
- 장점
    - 코드의 재활용성, 가독성을 높임 (개발의 효율을 올리기 위함)
    - CSS를 구조화하여 표현할 수 있음
    - Selector의 중첩을 통해 반복되는 부모 Selector 사용을 줄일 수 있음
    - 변수를 사용하여 CSS 속성값을 통일하여 관리 가능
    - 조건문, 반복문으로 동적 CSS 관리 가능
- 단점
    - 전처리기를 위한 도구 필요
    - Compile 시간 소요
- 예(모듈)
    
    <figure>
    <img src="https://github.com/nerd-animals/na-log/assets/144116866/fe2b5273-d992-402d-906a-5fa12f3f5653" alt="2024.01.30." width="100%"/>
    <figcaption>2024.01.30. 기준</figcaption>
    </figure>
    
    [less vs sass vs stylus | npm trends](https://npmtrends.com/less-vs-sass-vs-stylus)
    
    - SASS(SCSS)

        [Sass: Syntactically Awesome Style Sheets](https://sass-lang.com/)
        - 가장 먼저 나왔고, 다른 전처리기에 비해 상대적으로 다양한 기능이 제공된다고 한다.
        - 설치한 이용자도 가장 많은 것 같다. 업데이트도 잘 되고 있고!
    - Less

        [Getting started | Less.js](https://lesscss.org/#)
        - 원래는 컴파일 속도가 빨랐다고 하는데, SASS도 업데이트 이후 큰 차이가 없다고 한다.
    - Stylus
    
        [Stylus](https://stylus-lang.com/)
        - 전처리기 중 가장 나중에 나왔다고 한다. 기능도 많다고 하긴 하는데, 널리 사용되고 있는 SASS를 쓸 계획이다.
        - 홈페이지가 사실 제일 깔쌈하긴 하다.

### SASS vs SCSS

- SASS
    ```sass
    .content
      border: 1px solid #3bbfce
      margin: 8px
      padding: 4px
    ```
    - **Syntactically Awesome Style Sheets - 문법적으로 어썸!한 스타일시트**
    - 들여쓰기 + 줄바꿈 형식(Python 구문 스타일)
- SCSS
    ```scss
    .content {
      border: 1px solid #3bbfce;
      margin: 8px;
      padding: 4px;
    }
    ```
    - **Sassy CSS - 문법적으로 짱 멋진!, sass스러운(Sassy) CSS**
    - SASS의 3버전에서 등장한 언어
        - 좀 더 범용성이 넓고, CSS와 호환성이 좋음
        - SASS의 모든 기능을 지원하는 `Superset`
            - Superset : 표준 언어에 기능 추가
            - Subset : 표준 언어에 기능 축소
    - 중괄호`{}` + 세미콜론`;` 형식(JavaScript 구문 스타일)
        - 중첩을 중괄호`{}`로 표현
        - 세미콜론`;`으로 속성 구분
    - 사용자 수도 많음

### SASS 써보기

- 컴파일러 설치
    
    ![compiler](https://github.com/nerd-animals/na-log/assets/144116866/6371d1e5-55e0-4986-a332-a931e32e5c59)
    
    앞에 설명한 것처럼 CSS 언어가 아니기 때문에 웹 브라우저가 CSS로 읽을 수 있게 바꿔주어야한다. 고것이 바로 컴파일!
    

[SassMeister | The Sass Playground!](https://www.sassmeister.com/)
이 사이트에서도 온라인으로 미리 테스트해볼 수는 있지만, VSCode에서 작업하는 경우가 많을 거니까 아래의 절차로 한번 설치를 해보자.

- 구현 방식

[ruby-sass](https://sass-lang.com/ruby-sass/) : 원래 ruby 언어로 만들어졌는데, 2019년부터 지원이 중단되었다고 한다. ~~사요나라~~

[lib-sass](https://sass-lang.com/libsass/) : ruby로 구현된 구버전에서 C/C++로 구현되어 업데이트 된 2세대 ~~포켓몬~~ sass. 하지만, 이 친구도 사라질 예정이다. 신규 기능은 이용할 수 없다고 한다. [사요나라ㅠㅠ](https://sass-lang.com/blog/libsass-is-deprecated/)

Dart-sass : 가장 따끈따끈한 친구다. 신규 기능도 담고 있기 때문에 나는 이걸로 진행할 거다! **(2024.01.30.기준)**

1. [Node.js](https://nodejs.org/en)를 설치해준다.
2. `$ npm install sass -g`: sass를 글로벌하게 설치해주세요! (어느 폴더도 작동되게 해주세요!)
3. `$ npm show sass version` : sass의 현재 버전을 보여주세요!
4. style.scss을 만든 후 아래 코드를 복붙한다. 아니면 자기가 원하는 color 값을 입력해보자!
    
    ```scss
    /* style.scss */
    $color: green;
     
    h1 { color: $color; }
    p { color: $color; }
    ```
    
5. `sass style.scss style.css` : scss파일을 css파일로 컴파일해주세요!
    
    ```css
    /* style.css */
    h1 {
      background-color: black;
      color: black;
    }
    
    p {
      color: black;
    ```
    

### SASS watch

근데, 앞의 명령어로 수동으로 sass를 컴파일해달라고 하자니 너무 번거롭다. 자동으로 컴파일해줄 순 없을까?
`sass --watch style.scss style.css` : `--watch` or `-w`라는 플래그를 붙여 자동으로 컴파일하게 할 수 있다.
[Sass: Dart Sass Command-Line Interface](https://sass-lang.com/documentation/cli/dart-sass/)
- [플래그](https://sass-lang.com/documentation/cli/dart-sass/)는 해당 문서 참고!

`sass --watch scss:css` : 폴더 경로로도 가능하다! 

### VS Code Extension

[live-sass](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass)

- 설치하면 우측 하단에 Watch Sass라는 항목이 나타난다.
    - 이 친구가 자동으로 감시를 해준다!

![.map](https://github.com/nerd-animals/na-log/assets/144116866/c797e723-ee36-43dc-ab1d-5a696ad70e7e)

- `.map` 파일은 뭔데?
    
    scss 파일을 css로 컴파일을 하면, `.css.map` 파일이 같이 생긴다. 단어 그대로 scss, css를 mapping 시켜주는 파일이다.
    
    ![developer](https://github.com/nerd-animals/na-log/assets/144116866/aa552c10-8f99-4680-a168-c319f4af278f)
    
    개발자 도구에서 css 수정을 할 건데, 웹 브라우저는 css밖에 모르는 바보라 css를 보고, scss를 찾아가면서 수정을 해줘야한다. 하지만, map이 각 css의 짝인 scss를 매칭시켜줘 고마운 주선자 친구라고 할 수 있다.
    
    그래도 개발자용 파일이라 배포 시에는 필요가 없기에 자동으로 생기지 않게 하는 게 좋을 것 같다.
    
- 다양한 VS Code Extension

[scss-lint](https://marketplace.visualstudio.com/items?itemName=adamwalzer.scss-lint)
[scss-formatter](https://marketplace.visualstudio.com/items?itemName=sibiraj-s.vscode-scss-formatter)
[scss-snippet](https://marketplace.visualstudio.com/items?itemName=Miladfathy.scss-snippet)
[scss-scope-helper](https://marketplace.visualstudio.com/items?itemName=ffpetrovic.scss-scope-helper)
[Wscats](https://marketplace.visualstudio.com/items?itemName=Wscats.eno)

그 외 다양한 extension이 있으니, 한번 설치하면서 확인해보도록 하자.

scss파일을 저장만 하면 바로 css로 컴파일해주는 친구도 있다.
일단 나는 맨 위의 live sass compiler로 해볼까 싶다.

### SCSS / CSS 폴더 분리

고마운 주선자 친구인 `map`도 없애줄 겸 css, scss 폴더를 분리하여 프로젝트를 구성해보자!
setting.json을 열고, 다음과 같이 코드를 추가해준다.

```json
// setting.json
{
    "liveSassCompile.settings.generateMap": false, // .map 자동 생성을 끄고 싶을 때
    "liveSassCompile.settings.formats": [
    {
        "format": "expanded",
        "extensionName": ".css",
        "savePath": 경로
    }
    ],
    "liveServer.settings.donotShowInfoMsg": true
}
```

### React 및 Next.js에서는?(맨위 링크 참고하여 수정필요)

1. 프로젝트 폴더에서  `$ npm install sass` 로 Dart Sass를 설치해준다.
2. `package-lock.json`의 `‘dependencies’`에 잘 설치됐는지 확인한다.
    
    ![image](https://github.com/nerd-animals/na-log/assets/144116866/589691bb-c6bd-49e8-8f57-9bb4dbcfd504)
    
3. App.css 이름을 App.scss로 바꿔준다.
    
    ![image](https://github.com/nerd-animals/na-log/assets/144116866/1ea4b77f-5bd3-400e-b76a-daada4b8a52d)
    
4. App.js or App.tsx에서 import css 확장자명도 scss로 변경해준다!
    
    ![image](https://github.com/nerd-animals/na-log/assets/144116866/2206304c-876d-4bb9-b92b-d2b3c44d41c7)
    
5. 잘했다!

---

scss는 현업에서 자주 쓰이는 지는 확인하지 못했다.

문법 관련해서는 다음 포스팅에 이어서 작성해볼 예정이다.

![cat_coding](https://github.com/nerd-animals/na-log/assets/144116866/c356ca7e-79d0-4932-a166-48df295df508)

<center>파이팅해보자! 😎</center>

---

### 참고 링크

[velog](https://velog.io/@heumheum2/Nextjs-에서-scss-설정)
[[아무튼 Sass] 1. 시작하기 - Sass 개념, 컴파일러 설치](https://nykim.work/97)
[💎 SaSS & SCSS 소개 & 설치 세팅 💯 총정리](https://inpa.tistory.com/entry/SCSS-💎-SassSCSS-란-설치-및-컴파일)
[[CSS] CSS, SASS, SCSS 차이점, 사용방법](https://cocoon1787.tistory.com/843)
[CSS 전처리기(Pre-Processor) 배우기!](https://kdydesign.github.io/2019/05/12/css-preprocessor/)a:T1fcf,
## 개요

<aside>📝 프론트엔드를 한다면 html과 더불어 같이 보게 되는 css, 이 css란 무엇일까요?
</aside>

---

## CSS

> CSS(Cascading Style Sheets)
> 
> 
> Cascading : 계단식
> 
> Style : 멋을 내다
> 
> Sheets : (종이) 한 장
> 

계단식으로 한 장에 **멋**이 무엇인가~ 를 정의하는 문서라고 볼 수 있다.

그래서 그 **멋**을 어디다 쓸 건데? 라고 물으신다면, 바로 **HTML 문서에 멋, 스타일**을 더해주는 것이다.

HTML이 정의한 친구들에게 요소의 색상, 크기, 레이아웃, 폰트 등 다양한 스타일을 입혀줄 수 있다.

![CSS](https://github.com/nerd-animals/na-log/assets/144116866/2b0c6e68-26b2-44fa-a66d-925d41a57bb3)

**CSS**는 **선택자**와 **선언 구역**으로 구성된다.

- 선택자(Selector)는 스타일을 적용할 HTML 요소를 선택하는 역할을 맡고 있다.

요소를 선택한 후, 중괄호로 선언 구역을 설정한 후, 그 안에 스타일을 지정해준다.

선언 구역에서 **스타일 종류(속성) : 스타일 값**으로 스타일을 선언해주면 HTML에서 그 구역을 보고 적용시킬 것이다.

![CSS_wtf](https://github.com/nerd-animals/na-log/assets/144116866/a669250d-667b-4bef-bd56-a9abb049aa81)

## Cascading

CSS에서 가장 앞의 단어인 **Cascading**은, 폭포, 위에서 아래로 쏟아지는 이라는 뜻을 가진 단어이다.
말 그대로 **위에서 아래로 적용되는 스타일 시트**라는 건데… **그래서?**

CSS을 작업하다보면, 여러 스타일 규칙이 한 요소에 적용되기도 하고, 적용될 수도 있다.
그럴 때 **우선순위**가 필요한데, 그 우선순위를 결정하는 방식을 **CSS cascading**이라고 하는 것이다.

중요한 스타일 적용 규칙이기 때문에 제대로 이해하지 못하고 남발한다면, 위의 짤방처럼 웃픈 일이 발생된다.

<figure>
<img src="https://github.com/nerd-animals/na-log/assets/144116866/bc0d5b72-76df-4e6c-ab62-30ca32e0f6d6"/>
<figcaption>(아는 사람 얘기다.)</figcaption>
</figure>


CSS Cascading은 다음 3가지에 의해 결정된다.

- 중요도 : CSS가 어디서 선언됐는지
- 명시도 : 선택자 특정성의 중요도가 높은지
- 선언 순서

![important](https://github.com/nerd-animals/na-log/assets/144116866/fa797550-ce54-424c-ae38-a82d780aba57)

### 중요도

1. HTML의 head 요소 안의 style
    이 부분에 정의된 스타일은 해당 HTML 파일 내의 요소에 직접적으로 적용된다.
    
    ```html
    <head>
      <style>
        p {
          color: blue;
        }
      </style>
    </head>
    
    ```
    
2. HTML의 head 요소 안의 style 내부의 @import 문
    다른 CSS 파일을 가져와서 스타일을 정의할 수 있는데, 렌더링 성능에 영향을 줄 수 있기 때문에 가급적 사용을 피하는 것이 좋다.
    
    ```html
    <head>
      <style>
        @import url('styles.css');
      </style>
    </head>
    
    ```
    
3. `<link>`로 연결된 CSS 파일
    HTML 문서에 외부 CSS 파일을 연결하는 표준 방법이다. 가장 많이 사용하는 방법이 아닐까 싶다.
    
    ```html
    <head>
      <link rel="stylesheet" type="text/css" href="styles.css" />
    </head>
    
    ```
    
4. `<link>`로 연결된 CSS 파일 내부의 @import 문
    외부 css 파일 내에서 다른 css 파일을 가져오는 것이므로 그닥 좋지 못하다.
    
5. 브라우저 디폴트 스타일 시트
    자체적으로 브라우저가 가지고 있는 기본적인 스타일 시트를 뜻한다.
    
    ```css
    /* 헤더 태그의 기본 스타일 */
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: bold;
    }
    
    ```
    

![clarity](https://github.com/nerd-animals/na-log/assets/144116866/cf6ec22e-38fd-4c7b-8c65-c6be6990115c)

### 명시도
명시도는 CSS 규칙이 어떤 순서로 우선권을 갖는지를 결정하는 방식이다. 이름 옆에 쓰여진 것은 명시도 점수다.

1. !important
    이름부터 중요하다…! 근데, 쓸 때 정말 잘 생각해서 써야한다. 강제로 이 스타일을 우선시 해!의 느낌이라…
    
    ```css
    p {
      color: red !important;
    }
    
    ```
    
2. inline 스타일 : **1000점**
    important는 예외라고 생각하고, 이 inline 스타일이 가장 높은 우선순위라고 생각하면 된다.
    
    ```css
    <p style="color: blue;">This is a paragraph.</p>
    
    ```
    
3. id 선택자 : **100점**
    html 태그 내의 id는 `#`으로 선택한다.
    
    ```css
    #unique-paragraph {
      color: green;
    }
    
    ```
    
4. class / 가상 선택자 : **10점**
    html 태그 내의 class는 `.`으로 선택하고, 가상 선택자는 `:`으로 선택한다.
    

<a class="external-link" target="_blank" href="https://developer.mozilla.org/ko/docs/Web/CSS/Pseudo-classes">가상 선택자</a>는 가상 이벤트를 뜻하는데, :link, :visited, :focus 등 다양하다.

```css
.button {
  color: yellow;
}

.button:hover {
  background-color: orange;
}

```

1. 태그 선택자 : **1점**
    
    태그 선택자는 우선순위가 낮다.
    
    ```css
    p {
      color: purple;
    }
    
    ```
    
2. 상속된 스타일
    
    부모 요소로부터 상속된 스타일은 직접 스타일이 명시된 것이 아니기 때문에 가장 명시도가 낮다.
    
    ```html
    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Inheritance Example</title>
        <style>
          .parent {
            color: blue; /* 부모 요소의 텍스트 색상을 파란색으로 설정 */
          }
        </style>
      </head>
      <body>
        <div class="parent">
          <!-- 부모 요소 -->
          <p>This is a paragraph with inherited color.</p>
          <!-- 자식 요소 -->
        </div>
      </body>
    </html>
    
    ```
    

![declare](https://github.com/nerd-animals/na-log/assets/144116866/c2c0cc5e-372a-480f-9e21-2d8b733a3ffe)

### 선언 순서

늦게 선언된 스타일이 우선 적용된다.

```css
/* 첫 번째로 선언된 스타일, 적용X */
.box {
  color: red;
}

/* 두 번째로 선언된 스타일, 적용됨 */
.box {
  color: blue;
}

```

### Cascading 예시

```html
<div id="container" class="box">
  <p class="box">Hello, world!</p>
</div>

```

```css
.box {
  color: blue; /* 클래스 선택자, 10점 */
}

#container p {
  color: red; /* 아이디 선택자 + 태그 선택자, 101점 */
}

.box {
  color: green; /* 클래스 선택자, 10점 */
}

```

![image](https://github.com/nerd-animals/na-log/assets/144116866/aad2eaac-e4c1-411b-80d7-ebe4139e6e4e)

이런 코드에서는, `#container p`가 우선적용 될 것이다. 못 믿겠으면 한번 직접 해보자!

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Declaration Order Example</title>
    <style>
      /* 첫 번째로 선언된 스타일 */
      .box {
        color: red;
      }

      /* 두 번째로 선언된 스타일 */
      .box {
        color: blue;
      }
    </style>
  </head>
  <body>
    <div class="box">Hello, world</div>
  </body>
</html>

```

아래 코드로는 당연히 blue가 적용될 것이다.

<img src="https://github.com/nerd-animals/na-log/assets/144116866/48aa0881-66e5-466e-a9e6-a8667d18d41a" alt="specificity" />

Cascading 규칙이 어렵고, 직관적이지 못하다면 <a class="external-link" target="_blank" href="[https://specificity.keegan.st](https://specificity.keegan.st/)">해당 사이트</a>를 이용해보자.

이름을 바꾸고, 우측 상단에 `Sort by specificity`를 누르면 자동으로 정렬해주는 마법사같은 친구다.

선택자들을 입력할 수도 있고, 선택자에 따른 점수도 표기되니 헷갈릴 때 유용하게 사용할 수 있을 것 같다.b:T348f,
## 개요

<aside>📝 작업이 커지면 커질수록 css도 복잡해요. "sass(scss)" 도와줘요!
</aside>

---

## 0. 주석

원래 CSS는 `/*내용*/` 하여 주석 처리를 한다.

SCSS 또한 `/*내용*/` 을 하면 주석 처리한 것도 컴파일 돼서 CSS파일에 그대로 보이는데, //로 주석 처리를 할 경우 컴파일 되지 않는다.

```scss
/* SCSS */

// 이것은 한 줄 주석입니다.

/* 이것은 여러 줄 주석입니다. */

/* Compile to CSS */

/* 이것은 여러 줄 주석입니다. */
```

## **1. Data Types(데이터 유형)**

SCSS는 다양한 데이터 타입을 정의하고 있어 이를 **변수**처럼 활용할 수 있다.

| Numbers | 숫자 | 1, .82, 20px, 2em… |
| --- | --- | --- |
| Strings | 문자 | bold, relative, "/images/a.png", "dotum" |
| Colors | 색상 표현 | red, blue, #FFFF00, rgba(255,0,0,.5) |
| Booleans | 논리 | true, false |
| Nulls | 아무것도 없음 | null |
| Lists | 공백이나 ,로 구분된 값의 목록 | (apple, orange, banana), apple orange |
| Maps | Lists와 유사하나 값이 Key: Value 형태 | (apple: a, orange: o, banana: b) |

```scss
/* SCSS */

$font-size: 14px;
$color: #333;

.element {
  font-size: $font-size;
  color: $color;
}

/* Compile to CSS */

.element {
  font-size: 14px;
  color: #333;
}
```

## **2. Nesting (중첩)**

원래 css는 **.parent → .child, 부모 자식** **순**으로 작성되고, 요소의 스타일은 상속을 통해 적용이 된다.

하지만 중첩(Nesting)을 통해 부모 선택자의 반복을 줄일 수 있고, 복잡한 구조를 개선시킬 수 있다!

```css
/* SCSS */

.container {
  width: 100%;

  .box {
    padding: 10px;

    p {
      color: blue;
    }
  }
}

/* Compile to CSS */

.container {
  width: 100%;
}

.container .box {
  padding: 10px;
}

.container .box p {
  color: blue;
}
```

### **🔎@at-root으로 중첩 벗어나기**

상위 요소의 변수를 사용을 하지만, 상위 요소를 참조하여 중첩하고 싶진 않을 때가 있다.

```scss
/* SCSS */

.section {
	$w : 100px;
	$h: 50px;
	.item {
		width: $w;
		height: $h;
	}
	@at-root .box {
		width: $w;
		height: $h;
	}
}

/* Compile to CSS */

.section {
	$w : 100px;
	$h: 50px;
}

.section .item {
		width: $w;
		height: $h;
}
.box {
		width: $w;
		height: $h;
}
```

### **🔎중첩된 속성**

font-, padding- 등과 같이 동일한 네임 스페이스를 가지는 속성들은 다음과 같이 중첩하여 사용할 수 있다.

```scss
/* SCSS */

.parent {
  font: {
    family: Arial;
    size: 14px;
  }
}

/* Compiled to CSS */

.parent {
  font-family: Arial;
  font-size: 14px;
}
```

### **3. & (상위 선택자 참조)**

중첩(Nesting) 내부에서 **&** 키워드를 사용한다면, **상위(부모) 요소**를 선택해준다!

btn처럼 자기 자신을 재선택할때도 잘 사용할 것 같다.

```css
/* SCSS */

.button {
  position: absolute;

  &.active {
    color: red;
  }
}

.list {
  li {
    &:last-child {
      margin-right: 0;
    }
  }
}

/* Compile to CSS */

.button {
  position: absolute;
}

.button.active {
  color: red;
}

.list li:last-child {
  margin-right: 0;
}
```

치환의 원리이기에 다음과 같이 하나의 요소에 다양한 변화값을 주고 싶을 때도 사용할 수도 있다.

```css
/* SCSS */

.frontmatter {
  &-small {
    font-size: 12px;
  }

  &-medium {
    font-size: 14px;
  }

  &-large {
    font-size: 16px;
  }
}

/* Compile to CSS */

.frontmatter {
  font-size: 12px;
}

.frontmatter-medium {
  font-size: 14px;
}

.frontmatter-large {
  font-size: 16px;
}
```

## **4. Variables (변수)**

반복적으로 사용되거나 관리하고 싶은 값을 이름 앞에 **$**를 붙여 변수로 지정할 수 있다.

```css
/* SCSS */

$color: red;

.parent {
  $color: blue;
  color: $color; /* blue */
}

.child {
  color: $color; /* red */
}

/* Compiled to CSS */

.parent {
  color: blue;
}

.child {
  color: red;
}
```

### **🔎 Variable Scope**

다만 변수는 **선언된 블록 내**에서만 유효 범위를 가진다. 그밖의 블록에서는 전혀 동작하지 않으니 참고!

```css
.box1 {
  $color: #111;
  background: $color;
}

/* Error */
.box2 {
  background: $color;
}
```

### **🔎 !global로 전역 설정하기**

하지만, !global 플래그를 사용하면 변수의 유효 범위를 전역으로 설정할 수 있다.

```scss
$color:#000;

.test1{
    $color:#111 !global; //000->111 
    background:$color;
}
.test2{
    background:$color; //111
}
.test3{
    $color:222;
    background:$color; //222
}
```

### **🔎 #{ }**

**#{ }**를 이용하면 JavaScript의 템플릿 리터럴처럼 코드의 어디든지 변수 값을 넣을 수 있다. react나 vue에서도 해당 문법을 자주 썼던 것 같다.

```css
/* SCSS */

$family: unquote("Droid+Sans");
@import url("http://fonts.googleapis.com/css?family=#{$family}");

/* Compile to CSS */

@import url("http://fonts.googleapis.com/css?family=Droid+Sans");
```

---

## **5. Operations (연산자)**

연산자는 레이아웃을 디테일하게 디자인할 때 쓰일 것이다. 특히 나누기나 곱하기가 자주 쓰일듯하다.

| + | 더하기 |  |
| --- | --- | --- |
| - | 빼기 |  |
| * | 곱하기 | 하나 이상의 값이 반드시 숫자(Number) |
| / | 나누기 | 오른쪽 값이 반드시 숫자(Number) |
| % | 나머지 |  |

```scss
/* SCSS */
$width: 1000px;
$columns: 4;

.column {
  width: $width / $columns;
}

/* Compiled to CSS */

.column {
  width: 250px;
}
```

### 🔍 나누기 연산 주의사항

css는 속성값의 숫자를 분리할 때(`font:16px / 22px serif`; → `font-size: 16px`, `line-height:22px;`) /를 사용하기 때문에 /가 나누기 연산자로 제대로 동작하지 않을 수 있다.

나누기 연산을 활용하려면?

- 값 또는 값의 일부가 변수에 저장되거나 함수에 의해 반환되는 경우
- 값이 ()로 묶여있는 경우
- 값이 다른 산술 표현식의 일부로 사용되는 경우

---

## **6. Mixins (재활용)**

Mixin은 스타일 시트 전체에서 **재사용할 CSS 스타일**을 정의할 수 있는 좋은 기능이다.

`@mixin`(선언하기)을 통해 스타일을 선언하고 `@include`(포함하기)을 통해 사용한다.

쉽게 말해 함수 같은 기능 같다! 참고로 `@mixin` 안의 변수는 없어도 된다.

```css

/* SCSS */

/* 선언 - @mixin */
@mixin flex($direction, $justify, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

/* 사용 - @include */
.container {
  @include flex(column, center, center);
}

/* Compiled to CSS */
.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
```

---

## **7. Functions (함수)**

하지만 찐 함수가 있다.(ㅋㅋ)

비슷하긴 하지만, 사실 Mixin에 당연하게도 return 값이 없었다.

그렇다! 함수와 Mixin의 차이점은 **return 값**에 있다.

### **Mixin과 함수의 차이점**

- **Mixin** : 지정한 스타일(Style)을 반환
- **함수** : 연산된 특정 값을 @return 지시어를 통해 반환

```css
/* SCSS */

@mixin square($size) {
  width: $size;
  height: $size;
}

.square {
  @include square(100px);
}

@function double($number) {
  @return $number * 2;
}

.double {
  font-size: double(12px);
}

/* Compiled to CSS */

.square {
  width: 100px;
  height: 100px;
}

.double {
  font-size: 24px;
}
```

---

## **8. Condition (조건)**

### **if (조건문, 참, 거짓)**

조건문은 다른 언어에서도 많이 보이듯이… 비슷하다. 조건의 참 거짓에 따라 하나의 값을 반환한다.

**JavaScript의 삼항 연산자**와 구조가 비슷해보인다.

`if(조건, 표현식1, 표현식2)` : 조건 값이 true면 표현식1, 조건 값이 false면 표현식2

```css
/* SCSS */
$width: 555px;

div {
  width: if($width > 300px, $width, null);
}

/* Compile to CSS */

div {
  width: 555px;
}
```

### **@if, @else, @else if**

이 또한 조건에 따른 분기 처리가 가능하다!

이것도 마찬가지로 **JavaScript의** **if-else문**과 구조가 비슷해보인다.

```css
/* SCSS */

$color: orange;

div {
  @if $color == strawberry {
    color: #fe2e2e;
  } @else if $color == orange {
    color: #fe9a2e;
  } @else if $color == banana {
    color: #ffff00;
  } @else {
    color: #2a1b0a;
  }
}

/* Compile to CSS */

div {
  color: #fe9a2e;
}
```

---

## **9. Loop (반복)**

### **@for**

반복문도 다른 언어와 마찬가지로 반복적으로 출력해준다. 여기서는 주로 스타일을 반복적으로 출력해주겠지?

JavaScript의 **for문**과 유사하지만, 특이하게도 마지막 값을 포함/미포함하는 **through, to**가 있다.

이 through와 to에 따라서 **종료 조건**이 달라진다.

- from a **through** b : a부터 b까지 반복 (b 포함)
- from a **to** b : a부터 b 직전까지 반복 (b 포함X)

```css
/* SCSS */

/* 1부터 3까지 반복 (3번 반복) */

@for $i from 1 through 3 {
  .through:nth-child(#{$i}) {
    width: 20px * $i;
  }
}

/* 1부터 3 직전까지 반복 (2번 반복) */

@for $i from 1 to 3 {
  .to:nth-child(#{$i}) {
    width: 20px * $i;
  }
}

/* Compile to CSS */

.through:nth-child(1) {
  width: 20px;
}

.through:nth-child(2) {
  width: 40px;
}

.through:nth-child(3) {
  width: 60px;
}

.to:nth-child(1) {
  width: 20px;
}

.to:nth-child(2) {
  width: 40px;
}
```

### **@each**

List 또는 Map 데이터를 반복할 때 사용한다.

JavaScript의 **for-in / for-of문**과 유사하다! 생각보다 scss 문법도 다양한 것을 알 수 있다.

근데 이렇게까지 문법을 자세하게 사용할까 싶기도 하다.

```css
/* SCSS */

// List
@each $animal in puma, sea-slug, egret, salamander {

  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
  }
}

// Map
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}

/* Compile to CSS */

.puma-icon {
  background-image: url("/images/puma.png");
}

.sea-slug-icon {
  background-image: url("/images/sea-slug.png");
}

.egret-icon {
  background-image: url("/images/egret.png");
}

.salamander-icon {
  background-image: url("/images/salamander.png");
}

h1 {
  font-size: 2em;
}

h2 {
  font-size: 1.5em;
}

h3 {
  font-size: 1.2em;
}
```

---

## **10. Built-in Functions (내장 함수)**

Sass에선 기본적으로 다양한 [내장 함수](https://sass-lang.com/documentation/modules/)를 제공하는데, 코드가 복잡해질 때 한번씩 찾아보거나 하면 좋을 것 같다.

```scss
/* SCSS */
.element {
  color: lighten(blue, 20%);
  background-color: rgba(0, 0, 0, 0.5);
}

/* Compiled to CSS */
.element {
  color: #66a3ff;
  background-color: rgba(0, 0, 0, 0.5);
}
```

### 색상(RGB / HSL / Opacity)함수

- `mix($color, $color2)` : 두 개의 색을 섞는다.
- `lighten($color, $amount)` : 더 밝은 색을 만든다.
- `darken($color, $amount)` : 더 어두운 색을 만든다.
- `saturate($color, $amount)` : 색상의 채도를 올린다.
- `desaturate($color, $amount)` : 색상의 채도를 낮춘다.
- `grayscale($color)` : 색상을 회색으로 변환한다.
- `invert($color)` : 색상을 반전시킨다.
- `rgba($color, $alpha)` : 색상의 투명도를 변경한다. 예) rgba(red, 0.1)
- `opacify($color, $amount)` / `fade-in($color, $amount)` : 색상을 더 불투명하게 만든다.
- `transparentize($color, $amount)` / `fade-out($color, $amount)` : 색상을 더 투명하게 만든다.

### 문자(String)함수

- `unquote($string)` : 문자에서 따옴표를 제거한다.
- `quote($string)` : 문자에서 따옴표를 추가한다.
- `str-insert($string, $insert, $index)` : 문자의 index번째에 특정 문자를 삽입한다.
- `str-index($string, $substring)` : 문자에서 특정 문자의 첫 index를 반환한다.
- `str-slice($string, $start-at, [$end-at])` : 문자에서 특정 문자(몇 번째 글자부터 몇 번째 글자까지)를 추출합니다.
- `to-upper-case($string)` : 문자를 대문자로 변환.
- `to-lower-case($string)` : 문자를 소문자로 변환.

### 숫자(Number)함수

- `percentage($number)` : 숫자(단위무시)를 백분율로 변환합니다.
- `round($number)` : 정수로 반올림한다.
- `cell($number)` : 정수로 올림한다.
- `floor($number)` : 정수로 내림(버림)한다.
- `abs($number)` : 숫자의 절대 값을 반환한다.
- `min($numbers...)` : 숫자 중 최소 값을 찾는다.
- `max($numbers...)` : 숫자 중 최대 값을 찾는다.
- `random()` : 0 부터 1사이의 랜덤한 숫자를 반환한다.

---

sass 문법에 관해 한번 공부해봤다.

sass는 컴파일을 해야하는 번거로움이 있기 때문에 사용하기가 어렵다는 말도 있는데, css를 아예 등한시하는 것이 아니라 좀 더 쉽게 사용하게끔 해주는 것이니 scss를 배우고, 프로젝트 때 사용한다고 해서 도움이 안되는 것은 아니라고 생각한다.

열심히 프로젝트에 적용해보자!

---

### 참고 링크

[Sass: Documentation](https://sass-lang.com/documentation/)
[[SCSS] SCSS 문법 정리](https://seokzin.tistory.com/entry/SCSS-SCSS-문법-정리)c:T997,<aside>📝 state 하나에 많은 data들을 관리해보자!
</aside>

---

React 코드 작성 시, 한 컴포넌트 내에서 여러 개의 `input`이나 `textarea`로 여러 개의 `data`를 관리해야할 수도 있다.

```tsx
import { useState } from 'react';

export default function Write() {
	const [title, setTitle] = useState("");
	const [tag, setTag] = useState("");
  
  <div className="write-wrapper">
      <div className="write-editor">
        <div className="front-matter">
          <input
            className="title"
            type="text"
            onChange={(e)=> setTitle(e.target.value)}
          />
          <input
            className="tags"
            type="text"
            onChange={(e)=> setTag(e.target.value)}
          />
      </div>
    </div>
  </div>
```

글쓰기 페이지를 만드는데, 이런 경우 내가 input을 만들 때마다 State도 만들어줘야하는 번거로움이 생긴다.

개수가 제한이 됐더라도, 그 개수가 100개 이상이면?\
물론 그럴 일은 잘 없겠지만, html 코드는 둘째 치고 State 코드도 길어지고 번거로워질 것임이 틀림없다.

## 방법

`{}`, `object` 형태로 선언해주면 될 것이다.

또한, `spread` 문법으로 배열을 개별 요소로 분리후, 이벤트 객체(`e`)를 동적으로 선택해 업데이트하게 만든다.

## 개선 코드

```tsx
import { useState } from 'react';

export default function Write() {
  const [post, setPost] = useState({
    title: '',
    tag: '',
  });

  const onChangeInputPost = (e) => {
    setPost({...post, [e.target.className]: e.target.value});
  };

    <div className="write-wrapper">
      <div className="write-editor">
        <div className="front-matter">
          <input
            className="title"
            type="text"
            onChange={onChangeInputPost}
          />
          <input
            className="tags"
            type="text"
            onChange={onChangeInputPost}
          />
      </div>
    </div>
  </div>
```

```jsx
  const onChangeInputPost = (e) => {
	  const { className, value } = e.target;
	  setPost({...post, [className]: value});
	};
```

이렇게 `className`, `value`를 따로 변수에 지정해줘도 괜찮을 듯하다. 취향차이일 거 같다.

어찌됐든, `state`는 개선됐지만, state 실행 함수인 `setPost`가 조금 불안하다.

왜 [불안](the-difference-between-state-and-prev)할까?d:Tc9b,<aside>📝 prev (previous)
1. 형용사 (시기적으로 이야기 중인 사건·사물) 이전[전]의, 먼젓번의 (=prior)
2. 형용사 (이야기 중인 시간) 바로 앞의 (=preceding)
</aside>

---

```tsx
import { useState } from 'react';

export default function Write() {
  const [post, setPost] = useState({
    title: '',
    tag: '',
  });

  const onChangeInputPost = (e) => {
    setPost({...post, [e.target.className]: e.target.value});
  };
  
    <div className="write-wrapper">
      <div className="write-editor">
        <div className="front-matter">
          <input
            className="title"
            type="text"
            onChange={onChangeInputPost}
          />
          <input
            className="tags"
            type="text"
            onChange={onChangeInputPost}
          />
      </div>
    </div>
  </div>
```

현재 코드도 나쁘지는 않다.\
하지만, React에서 state 실행은 동작함수가 여러 개 실행되더라도 업데이트를 **대기열, 임시 저장공간에 저장'만'** 되기 때문에 이전 상태, 즉 **최신 값을 보장하지 않는다.**

여러 개의 입력 필드가 있을 때, 동시에 여러 필드를 수정한다면, 최신 값을 고려하지 않을 수도 있다는 것이다.\
즉, **업데이트가 안될 수도** 있는 가능성이 있다는 것.

## prev 알아보기

```jsx
 const [state, setState] = useState(0);
  const sumAll = () => {
    setState(state + 1);
    setState(state + 2);
    setState(state + 3);
    setState(state + 4);
  };
  const sumAllWithPrevState = () => {
    setState((prev) => prev + 1);
    setState((prev) => prev + 2);
    setState((prev) => prev + 3);
    setState((prev) => prev + 4);
  };

  return (
    <>
      <div>결과는 : {state}</div>
      <button type='button' onClick={sumAll}>
        sumAll
      </button>
      <button type='button' onClick={sumAllWithPrevState}>
        sumAllWithPrevState
      </button>
    </>
  );
```

좋아보이는 [예시 코드](https://velog.io/@mh-yeo/React-prevState-in-setState)가 있어 [예제](https://otterbits.github.io/no-answer/)를 만들어보았다. (감사합니다.)

`sumAll` : 최신 값을 고려하지 않고 한다면, `4`가 나올 것이고,

`sumAllWithPrevState` : 최신 값을 고려한다면, `10`이 나올 것이다.

## 개선 코드

```tsx
import { useState } from 'react';

export default function Write() {
  const [post, setPost] = useState({
    title: '',
    tag: '',
  });

	  const onChangeInputPost = (e) => {
    setPost((prevState) => ({
      ...prevState,
      [e.target.className]: e.target.value,
    }));
  };

  
    <div className="write-wrapper">
      <div className="write-editor">
        <div className="front-matter">
          <input
            className="title"
            type="text"
            onChange={onChangeInputPost}
          />
          <input
            className="tags"
            type="text"
            onChange={onChangeInputPost}
          />
      </div>
    </div>
  </div>
```

때문에 이렇게 state 함수인 `setPost` 함수가 `prevState`를 통해 최신 값으로 업데이트하도록 개선하였다.

`💣`no-answer 하나 배웠다!e:T1067,
## Homebrew 다운로드

- **Homebrew**란?\
애플에서 제공하지 않는, Mac OS에서 필요한 유용한 패키지를 설치할 수 있도록 도와주는 패키지 관리자입니다.\
Homebrew를 설치하면, 터미널에서 `brew install {설치대상}`을 입력해 유용한 패키지를 쉽게 설치할 수 있습니다.\
(그 중 한 가지가 오늘 설치할 **git**입니다.)

---

[git 공식 홈페이지](https://git-scm.com)에 접속합니다.

### 1. Download for Mac 클릭
![download](https://github.com/nerd-animals/na-log-engine/assets/144116866/4fee77a1-2849-490f-9983-26099db11bb7)

`Download for Mac`을 클릭합니다.

### 2. homebrew 클릭
![homebrew](https://github.com/nerd-animals/na-log-engine/assets/144116866/6d2c28fa-e3ab-4c83-8068-37f691434b2f)

`homebrew`를 클릭하면 homebrew 페이지로 이동됩니다.

### 3. 설치 명령어 복사
![copy](https://github.com/nerd-animals/na-log-engine/assets/144116866/dac71d22-8c58-4b84-99c1-9782f9563968)

📋 아이콘을 클릭하면 왼쪽의 설치 명령어가 복사됩니다.

```shell
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```
복사가 되지 않는다면 위의 명령어 참고

### 4. 터미널 열기
![terminal](https://github.com/nerd-animals/na-log-engine/assets/144116866/a74f08ea-728a-45f7-8e47-b9f9f6237143)

`command + space` 키를 눌러 터미널을 검색 후 실행합니다.

### 5. 터미널에 명령어 붙여넣기

`3.설치 명령어 복사`에서 복사했던 명령어를 붙여 넣습니다.

![Password](https://github.com/nerd-animals/na-log-engine/assets/144116866/6e280d7b-1bfd-4912-a3aa-4b8f1ef3a82f)

`Password: ` 출력 시, 맥 로그인 비밀번호를 입력하면, 설치가 시작됩니다. (📌시간이 조금 오래 걸립니다.)

### 5-1. M1 Mac
```shell
==> Next steps:
- Run these three commands in your terminal to add Homebrew to your PATH:
    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/{사용자명}/.zprofile
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/{사용자명}/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
- Run brew help to get started
- Further documentation:
    https://docs.brew.sh
```

git 설치 전, M1 Mac은 추가로 해야할 사항이 있습니다.\
아마 위의 brew 설치가 다 됐다면, `Next steps`이라는 안내사항이 떴을 건데요.\
Homebrew 기본 경로가 M1과 Intel이 다르기 때문에 이 과정을 꼭 해야만 정상적으로 git 설치가 가능합니다.

```shell
$ echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/{사용자명}/.zprofile
```
```shell
$ echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/{사용자명}/.zprofile
```
```shell
$ eval "$(/opt/homebrew/bin/brew shellenv)"
```

안내와 같이 세가지 명령어를 입력해주면 해결됩니다.\
사용자명에 꼭 **사용자명**을 넣고 실행해주세요!

### 6. 설치 완료

![image](https://github.com/nerd-animals/na-log-engine/assets/144116866/6bddbebe-44b5-402e-8f37-f523309c2718)

설치가 완료된 후 `brew help` 명령어 및 `brew --version` 명령어를 통해 잘 설치가 됐는지 확인합니다.


## 오류 발생 시(M1 mac)
<aside>🚧 위의 Next steps**을 하지 않았다면, 발생하는 오류입니다!
Next steps을 꼭 하고 와주세요!
하셨다면 해당 챕터는 건너뛰셔도 됩니다.😊
</aside>

```shell
zsh: command not found: brew
```
next steps을 하지 않고, `brew help` 명령어 시 위의 오류가 출력될 것입니다.
- M1 Mac : `/opt/homebrew/`
- Intel Mac : `/usr/local`

Homebrew 기본 경로가 M1 Mac과 Intel Mac이 다르기 때문에 발생되는 오류입니다.

---

## Git 설치
1. 터미널에 명령어 입력하기

```shell
brew install git
```
위의 명령어를 입력하여 git을 설치합니다.

2. 설치(버전) 확인하기

```shell
git --version
```
정상적으로 git 버전이 출력되면 정상적으로 설치된 것입니다. 굿!

---

## 참고 링크
https://velog.io/@wijoonwu/Mac-OS-에서-Git-설치하기

https://somjang.tistory.com/entry/macOS-M1-Mac-에-brew-설치하는-방법f:T28cc,    
## 🤔 SSAFY 12기 비전공자 1차 CT/적성 합격 후기

<aside>📝 Samsung SW Academy For Youth, 삼성 청년 SW 아카데미
</aside>

## 📌 결과

![image](https://github.com/nerd-animals/na-log/assets/144116866/0277ee95-e35c-4682-a2ed-7a1c5906afcd)

합격!

### 🧐 왜 준비했는가?

SSAFY, 비전공 개발자로서 직무 변경을 위해, 공백기를 메울 수 있는 가장 좋은 선택지라고 생각했다.

블로그 개발을 하면서도 개발자에 대한 생각이 깊어졌고, 좀 더 전문적인 교육도 받고, 다른 사람과 프로젝트를 해보고 싶었다. 스텝업을 하고싶었다!

네부캠, 소프티어, 우테코도 있지만 금융권을 목표로 한다면, SSAFY가 좋다고 생각한다.
협약도 맺고, 특채도 있다.

---

## 📚 준비 과정

### 📍 시험 일정

![image](https://github.com/nerd-animals/na-log/assets/144116866/6557c1f5-7784-4eb1-a8db-69a926216ec7)


- 지원서 접수 : 2024.4.22.(월) ~ 2024.5.7.(화)
- 에세이 작성 : 2024.5.8.(수) ~ 2024.5.18.(토)
- SW 적성진단(비전공자) : 2024.5.11.(토)
  - 소요 시간 : 70분
  - 형태 : On-Line CBT (Computer Based Test)
   수리/추리논리력 및 Computational Thinking 진단     
  - 시간 : 지원서 제출 후 ‘지원현황 조회’ 화면에서 희망 차수 선택
        ※ 차수 선택 기간 : 5.7.(화) 17:00 까지 (지원서 접수 기간 내 차수 선택 필요)
        
- 코딩테스트(전공자) : 2024.5.19.(일)
- 에세이 & SW 적성진단 결과 발표 : 2024.5.28.(화) 오후 3시
- Interview : 2024.6.5.(수) ~ 2024.6.12.(수)
- Interview 결과 발표 : 2024.6.19.(수) 오후 3시

### 🗓️ 준비 기간

> 2024.4.22.(월) ~ 2024.5.11.(토)
> 
- 1주 : 해커스 파랭이(기본), 봉봉TV
- 2주 ~ 3주 : 모의고사 (해커스, 봉봉TV, 더챕터인적성)
  - 오전 10시 모의고사
  - 오후 모의고사 정리 및 안되는 부분 유튜브 강의 ([봉봉TV](https://www.youtube.com/@_bongbong))
        

![image](https://github.com/nerd-animals/na-log/assets/144116866/927a58d0-bc77-4cba-a95f-1f4edbc4f631)

![image](https://github.com/nerd-animals/na-log/assets/144116866/a713898e-46c9-425b-94d0-29255199963e)

열품타 앱으로 측정하면서 공부했다.

총 SSAFY 4월 22일부터 5월 11일까지 80시간 정도 공부했다.
(에세이도 포함시켰던 걸로 생각이 드는데 인적성/CT는 60시간 정도 한 것 같다.)

### ✅ 인적성

> 난이도 차 : GSAT 하양이 > GSAT 파랭이 > 에듀윌 SSAFY > (시대고시) > 해커스 SSAFY
> 모래주머니 차고 공부하고 싶으시다면 에듀윌 SSAFY 추천
> 
- 기본서(3일) : 봉봉, 해커스 유튜브 강의 보면서 메모
    - 해커스 GSAT 파랭이 : 기본
    - 봉봉TV : 18,000원 멤버쉽 가입
        자료해석, 응용 수리 푸는 방법
        
- 실전 모의고사(그 이후) : 하루에 1개씩 + 오답노트

### ✅ CT

> SWEA 문제를 보고 코딩은 하지 않더라도, 문제를 보고 답을 도출해라.
> 

해커스 SSAFY, 에듀윌 SSAFY

[SW Expert Academy](https://swexpertacademy.com/main/main.do)

SSAFY 단톡방에 감사하게도 약 40문제 자료 공유를 해주셔서 참고하여 풀었다.

[SSAFY 비전공 적성진단 CT 감잡기용 DailyCT 40제](https://www.notion.so/451a447316054652b618f77995681cfd?pvs=21) 

### ✅ 에세이

<aside>📌 비전공자 에세이 항목
학업 및 취업준비를 하며 가장 어려웠던 경험과 이를 해결하기 위해 했던 노력을 기술하고, SSAFY에 지원하신 동기에 대해서도 작성 바랍니다. 500자 내외 작성 (최대 600자까지 입력 가능)
</aside>

> 질문을 항목별로 나눠서 작성하기
(괄호는 전체 10 비중 중 차지하는 정도를 뜻함)
> 
- 학업 및 취업준비를 하며 가장 어려웠던 경험 **(2)**
    - 개발 경험이 **없어도 됨** (비전공자면 없는 게 당연함)
    - 개발 경험이 있다면 거기에서 **어떤 게 가장 어려웠는지** 생각해보기
    - 직장인이었다면 직장에서의 어려웠던 경험보다는 **학업 및 취업준비**를 일단 생각해보기
- 이를 해결하기 위해 했던 노력 **(3)**
    - 구체적이지만, 면접에서도 궁금해서 물어볼 수 있게끔 **떡밥 던지기**
- SSAFY에 지원하신 동기 (SSAFY가 필요한 이유) **(5)**
    - ++ 개발에 입문하게 된 **동기**가 있다면 같이 써보기
    - 다른 부트캠프와 **SSAFY만의 차별점**
    - 돈이나 나이 언급은 굳이...?

> 마음가짐
> 
- SSAFY 공식 홈페이지, SSAFY 유튜브, 싸피셜 등을 참고하여 **SSAFY가 어떤 사람을 뽑고 싶어하는지?**
- 구체적인, 어떤 개발자가 되고 싶은지? (’좋은 서비스를 개발하는~’, ‘꼼꼼한~’ 과 같은 **추상적인 것X**)
- 비전공을 굳이 언급하지 않기

> 그외 팁
- 내 에세이를 보고 면접 질문을 만들어보기
- 다른 사람에게 봐달라고 하기

---

이 세가지 항목과 마음가짐을 생각하며 작성하였다.

에세이는 모집 설명회 중 많은 분이 통과한다고 언급했듯이 1차에서 그렇게 큰 비중이 있지 않다고 생각한다.
(개인적으로 비전공은 적성, 전공은 코딩테스트가 중요하다고 생각)

[삼성 청년 SW 아카데미 12기 온라인 모집 설명회](https://www.youtube.com/live/WLHwtcewyTs?feature=shared&t=9231)

→ 정량적인 평가와 정성적인 평가 중 **정량적인 평가**가 당연히 객관적인 평가가 쉬우니까!

하지만, 면접 때 에세이 관련 질문이 나올 수도 있으니 면접을 대비하기 위해선 어찌됐든 에세이 또한 잘 써야한다고 생각한다.

## 🔔  응시 팁

[삼성 청년 SW 아카데미 12기 온라인 모집 설명회](https://www.youtube.com/live/WLHwtcewyTs?feature=shared&t=5622)

웬만한 1, 2차 내용은 해당 온라인 모집 설명회를 참고해보자.
12기 온라인 모집 설명회에서는 예전 기수 때 대외비였던 것이 많이 오픈됐다.

### ✅ 자주 나오는 질문

- 오픽 자격 번호 : 인증서 왼쪽 상단 인증서 번호 기입
    
![image](https://github.com/nerd-animals/na-log/assets/144116866/421db703-f095-4cff-b8ee-bab72f809e43)
But! 잘못 적었어도 2차 때 인증서 제출해야해서 OK!
    
- 에세이 제출 기간 내에 시험 보는 게 맞나요?
    맞습니다. 비전공, 전공 둘 다 에세이 제출 기간 내에 시험을 봅니다.
    
- 싸피 지원서 제출했는데 에세이 제출란이 안 뜨고 바로 제출이 됐어요.
    문제 없습니다. 지원서 제출 마감 1일 뒤에 에세이 제출 기간이 따로 열리고, 지원현황조회에 에세이 제출란이 따로 열립니다.
    
- 에세이 주제 나왔나요?
    에세이 제출 기간 내에 주제가 나옵니다.
    미리 작성하는 사람들은 대부분 전 기수 에세이 주제대로 작성합니다.
    
- 재수인 사람 많나요?
    꽤 있는 것 같습니다.
    3수도 계시고, 저 또한 재수입니다.
    
- 공무원인 사람 많나요?
    꽤 있는 것 같습니다.
    저만 해도 공무원이었고, 단톡방에서도 이런 내용들이 꽤 오갔습니다.
    (공무원인 분 계신가요?, 공무원을 그만두고 왜 싸피오냐… 등)
    
- 맥북으로 시험 응시해도 되나요?
    아니요. 이번 기수에는 몇 분이 맥북 오류 때문에 아예 시험 응시 못하시는 분도 봤습니다.
    SSAFY에서 안내되는 시험 환경에 맞추는 게 나아요!
    
- 집에서만 응시해야하나요?
    독립된 공간에서 응시해야합니다. (PC방, 오픈된 스터디카페 등은 안됨)
    
- 그외 모든 질문
    싸피 사무국에 전화하는 게 정말 빠르고 정확합니다.
    단톡방에 묻는 분들도 많긴 했는데, 정확하지 않은 정보가 오고가는 경우도 있더라구요.
    
    확실한 정보를 빠르게 원하신다면 전화 한번 해보시길 바랍니다.
    
---

## ✨ 후기

### 11기
11기에서도 물론 준비를 열심히 했지만, 진심이 12기보다는 부족했던 것 같다.
긴장도 많이 됐고, CT는 20솔 했다고 생각했지만, 수추리는 많이 못 풀었었고, 에세이도 부족했다고 생각한다.

결과는 1차 광탈이었다.

### 12기

그리고 6개월 동안 블로그도 만들며 내가 어떤 개발자가 되고 싶은지 정리해나갔다.
SQLD와 정처기 필기도 땄고, 네이버 코테도 응시해보고 실력이 전보다는 많이 늘었다고 생각한다.

12기 온라인 모집 설명회에서 에세이에서 많이 걸러지지 않다고 언급도 했으니
**비전공자**는 **수추리/CT**를,
**전공자**는 **코딩테스트**를 열심히 준비하는 게 나중에 결과 나오기 전 마음이 편하다.

‘공부를 안해도 된다’, ‘며칠 투자 안해도 된다’, ‘수추리 거의 못 풀었다’, 라는 말도 있다.
다 **각자의 상황에 따른 생각일 뿐**이라고 생각한다.
(원래 NCS 류의 문제를 많이 준비하셨거나 찍은 게 많이 맞았을 수도 있고, 시간대 별로 난이도도 다를 수도 있음)

수추리/CT가 부족하다면, 시간 투자를 많이 하는 게 합격률이 많이 올라갈 것 같다.

💬 11기 때, 나도 이런 후기만 보고, 수추리에 시간 투자를 많이 하지 않았다.
정말 합격하고 싶으시다면 수추리/CT를 미리미리 파보셨으면 좋겠다.

---

- **수추리** : `10/15` 솔
    빠르게 푸는 것도 좋지만, 정확하게 푸는 것이 좋다.
    틀렸을 때 감점이라는 소리도 있긴 했는데, 정확하게 나온 정보가 없어서 5문제는 찍었다.
    
- **CT** : `25/25` 솔(마지막 문제 5번은 잘 모르겠음)
    CT는 자료구조, 알고리즘을 알면 좋긴 하다.
    근데 모르더라도 대부분 노가다로 많이 푸신다고 하더라.
    노가다는 대신 정확성이나 속도가 떨어지기 마련이니, 평소에 코딩테스트를 준비하셨던 분이라면 쉽게 접근할 수 있을 것 같다.
    

---

![lets-go](https://github.com/nerd-animals/na-log/assets/144116866/0acf549d-b8c3-4834-8ac0-aa60fc3dd6a0)

<center>2차도 빠르게 포스팅 해보자! 12기 파이팅!</center>10:T2f55,    
## 🤔SSAFY 12기 비전공자 2차 면접 후기

<aside>📝 Samsung SW Academy For Youth, 삼성 청년 SW 아카데미
</aside>

## 📌 결과

![image](https://github.com/nerd-animals/na-log/assets/144116866/4089e423-19bd-4eba-895e-87594c02f5c4)

### 🧐 왜 준비했는가?

SSAFY, 비전공 개발자로서 직무 변경을 위해, 공백기를 메울 수 있는 가장 좋은 선택지라고 생각했다.

블로그 개발을 하면서도 개발자에 대한 생각이 깊어졌고, 좀 더 전문적인 교육도 받고, 다른 사람과 프로젝트를 해보고 싶었다. 스텝업을 하고싶었다!

네부캠, 소프티어, 우테코도 있지만 금융권을 목표로 한다면, SSAFY가 좋다고 생각한다.
협약도 맺고, 특채도 있다.

### 📃스펙

- 지방 거점 국립 대학교 졸업
    - 전공 : 이공기타(농대)
- 학점 : 3.18/4.5
- 영어 : OPIc IM1
- 자격증 : SQLD, 컴활 1급, 한국사 2급 **(기재란 없음, 면접 때 필요시 제출)**
- 경력 : 공무원 2년 6개월

---

## 📚 준비 과정

### 📍 시험 일정


![image](https://github.com/nerd-animals/na-log/assets/144116866/05172666-061d-4b83-8b8c-4079156a6a6c)

- 지원서 접수 : 2024.4.22.(월) ~ 2024.5.7.(화)
- 에세이 작성 : 2024.5.8.(수) ~ 2024.5.18.(토)
- SW 적성진단(비전공자) : 2024.5.11.(토)
  - 소요 시간 : 70분
  - 형태 : On-Line CBT (Computer Based Test)
  수리/추리논리력 및 Computational Thinking 진단      
  - 시간 : 지원서 제출 후 ‘지원현황 조회’ 화면에서 희망 차수 선택
        ※ 차수 선택 기간 : 5.7.(화) 17:00 까지 (지원서 접수 기간 내 차수 선택 필요)  
- 코딩테스트(전공자) : 2024.5.19.(일)
- 에세이 & SW 적성진단 결과 발표 : 2024.5.28.(화) 오후 3시
- **Interview : 2024.6.5.(수) ~ 2024.6.12.(수)**
- **Interview 결과 발표 : 2024.6.19.(수) 오후 3시**

### 🗓️ 준비 기간

> 2024.5.28.(화)~2024.6.12.(수)
> 

2024.6.10.(월)에 응시하였음.

### 📝 면접 스터디

> PT 면접(질문 포함) - PT 피드백 - 인성 면접(질문 포함) - 피드백 (총 2시간)
> 

[[NerdAnimals 템플릿] 면접 스터디](https://otterbit.notion.site/NerdAnimals-b754324bed1241928b13843fd848dad4?pvs=4)

- 실제 면접처럼 면접자는 **따로 앉아서** 진행
- **오프라인**으로 구하는 게 좋아보임
(온라인은 참여도가 상대적으로 낮음)
- **영상 촬영 or 녹음 후** 셀프 피드백도 좋음
(보기 좋지 않은 습관 파악 용이)
- 된다면 하루에 2시간 씩 모임

- 1일 차(05.28.) : 온라인 | 단톡방 개설
    - SSAFY 준비 단톡방 활용
        
        <aside>💡 {단톡방 링크}
      💙{if 오프라인, 지역} {온/오프라인} 스터디 모집합니다!
        - {전공/비전공/전공무관}
        - 지역 : {지역}
        - 인원 : {현원}/{총원} | 현재 전공 {O명}, 비전공 {O명}
      </aside>
       <aside>📖 (예시)
      http://kakao.com/
      💙서울 강남역 스터디 모집합니다!
        - 전공무관
        - 지역 : 서울 강남역
        - 인원 : 3/5 | 현재 전공 1명, 비전공 2명
        </aside>
    - 인원 : 최소 3명, 최대 5명
    - 온/오프라인 : 오프라인
    - 전공/비전공 : 크게 상관 없어보임
- 2일 차(05.29.) : 오프라인, 카페 | 면접 준비 방향성 회의(인당 5개 씩)
  - PT 주제 검색 및 선택 (인당 5개 씩, 25개)
  - 스터디 주기 회의
- 3일 차(05.30.) : 오프라인, 스터디 카페 | PT 및 인성 간이 면접
  - PT 주제 1개 씩 찾은 걸로 발표 진행
- 4일 차(05.31.) : 온라인 | PT 주제 학습
  - 각자 PT 주제 5개 씩 정보 정리
- 5일 차(06.01.) : 오프라인, 스터디 카페 | PT 및 인성 면접
  - PT 다른 사람 주제로 발표
- 6일 차(06.02.) : 오프라인, 스터디 카페 | PT, 에세이, 인성 기반 최종 모의 면접
  - PT, 에세이, 인성 기반 최종적으로 면접
- 7일 차(06.03.) ~ 당일날 : 최종 면접 준비
  - 1분 자기소개 암기
  - 혼자 예상 질문 계속해서 정리

### ✅ 개인 & 인성 면접
[[NerdAnimals 템플릿] 개인 & 인성 면접 질문 리스트](https://otterbit.notion.site/954651dbf06d40fa809a07019d55ba70?v=e75ffc8a44f449359221f95b5e94c84e&pvs=4)

<aside>🗣 1분 자기소개
</aside>

- 여유 있게 40초 정도 분량을 준비
    - **무조건 외워라**
    - **완벽하게 준비, 대비**해라
    - 비언어적인 것 신경 쓰기 (중간 호흡, 손짓, 시선 처리)
- 숫자를 써서 **수치화**하는 것이 유리
- 왜 개발자가 되고 싶은지, 어떤 직무를 맡고 싶은지
- 교육에 대한 **학습 열의와 성실함** 표현

<aside>🗣 공통 질문
</aside>

- 핵심 키워드를 잡아라, 큰 것들로 채워나가기
- 실패/성공/도전/희생 경험 : 특별하고 의미 있는 하나의 경험으로 만들어보기
    - 완벽하게 이 경험을 리마인드해라.
    - 개발 관련이면 +
- 마지막 한 마디 : 짧게!
- 비언어적
    - 평소에도 말 사이 텀마다 숨을 한번 쉬는 연습해보기
    - 급하면 안됨
    - 차분하게 얘기하기
- ‘경쟁력’과 같은 한 단어로 모든 것을 함축적으로 표현할 수 있는 단어를 쓰기
    - ex) SSAFY의 ~ 활동으로 저는 다른 사람들과 경쟁력을 가지려고 합니다.

<aside>🗣 개인 질문
</aside>

- 에세이 기반으로 예상 질문 및 답변 준비
    - 본인이 먼저 에세이를 돌려보면서 최대한 질문을 만들어보고, 지인에게 예상 질문 받는 것도 좋음
    - 나의 의도와 다른 사람이 본 에세이의 의도가 다른 경우가 있으니 오해의 소지가 있는 문장을 확인할 것
- 기존에 했던 일, 비전공 얘기는 되도록 하지말기, 잘 엮으면 OK
    - 억지로, 내 약점을 어필하려고 공무원/비전공 얘기를 하지말라는 뜻
    - 기존에 했던 일/비전공에서 강점이나 배웠던 점이 있다면 어필하는 것은 OK

### ✅ PT 면접

<aside>📎 • 배경(⭐문제상황, 개념, 도입)
• ⭐활용(장점) → 사례
• ⭐리스크(단점) → 사례
• ⭐핵심 기술, 동작 방식
• 최신 동향
</aside>

[PT면접 평가요소 및 발표 템플릿/시나리오_피티 면접 실전 활용](https://www.youtube.com/watch?v=DOvCIrwMPbQ)
> 구글링하면 나오는 PT 면접 1순위 영상

PT 면접은 정말 이 영상 하나만 봐도 많은 도움된다.

특히, 발표 스킬, 말 잘하는 사람을 뽑는 게 아니라 **문제 해결 능력을 본다**는 것, ‘why, 왜’가 포인트라고 생각한다.

**논리적인 근거를 바탕**으로 **아이디어를 도출**하는 과정이 중요하다고 볼 수 있다.

최신 IT 동향을 살피는 것이 도움이 많이 됐다.

[[NerdAnimals 템플릿] PT 주제 리스트](https://otterbit.notion.site/NerdAnimals-PT-04cb6a70898c48a6aeef9c04fbc4d4d2?pvs=4)

- 사전 준비
주제와 지문, 요구사항이 주어진다라고 추측
사전 준비 시간 : 15분 정도
발표 : 5분 내로

- 발표
  1. **분위기** : 최근 들어 ~ 주제에 대해 관심이 높아지고 있습니다. 저 또한 이 주제에 대해 많이 접해보고 있습니다.
  2. **서비스 제안** : 제공하는 가치까지
  저는 이 문제에 대해 ~~ 서비스를 제안하려고 합니다.
  3. **⭐(가장 먼저) 문제 정의** : 두괄식, 구체적으로, 한문장으로, 핵심 문제(SW로 해결가능하도록)
저는 우선, 해당 상황의 문제를 ~~라고 생각합니다.
    a. **구체화**
    특히, ~~ 문제가 있었습니다.
  4. **해결 방안** : 핵심 기술
이 문제를 특정 ~~로 개선, 해결하고자 했습니다.
~~ 기술을 이용하면, ~~, ~~~을 개선시킬 수 있습니다.
+@ 대신 이런 단점/리스크도 있어서 고려해봐야합니다.
  5. **사례** : 사례가 생각나면 best
~~ 에서도 ~~ 문제를 ~~로 개선한 사례가 있다.
  6. **마무리**
그래서 저는 ~~를 이용해서 주제를 개선시킬 수 있습니다.


### 🧷 공통 팁

- 면접관의 질문은 혼내려고 질문하는 것이 아니다.
    내 답변의 방향성을 제시해주는 거라고 생각해보자!
- 경청, 수용하는 자세 중요
  - 놓친 부분, 모르는 부분이라고 말도 안되는 걸 쥐어짜내서 질문을 방어적으로 쳐내려고 하지말고, 인정해라.
  - 아는 질문이라도 바로 대답하려고 하지말고, 차분히 3초 정도 면접관의 말을 이해하고 있다는 것을 보여주고, 핵심 키워드를 고민하고 대답해보자
- 끝맺음이 어색하다면?
’이상입니다.’와 같이 끝을 맺어줄 것
- 취업 의지를 많이 어필하면 좋을 것 같음
- 대부분의 답변 : 핵심 한 문장(두괄식) + 경험 + 마무리 문장

### 🧱 준비물 및 복장

- 복장
  - **대학교 대외활동 면접 때** 입고가는 옷이라고 생각해보자!
  - 흰 반팔티(넣입) + 시어서커 자켓 + 청바지 + 운동화
![image](https://github.com/nerd-animals/na-log/assets/144116866/fd4463a1-1d0e-4eb2-befc-74b577b7a805)
  - 남자 : 50% ↑ 정장 / 나머지 비즈니스 캐주얼 및 캐주얼룩
  - 여자 : 10% ↓ 정장 / 나머지 비즈니스 캐주얼 및 캐주얼룩
  - 정말 츄리닝 + 쪼리만 아니면 된다.
  - 정장 : 심리적 안정, 육체적 고통 / 캐주얼 : 심리적 고통, 육체적 안정
  - 겨울이었다면 정장 입었을 것 같은데, 여름이라 정장은 정말 못 입을 것 같았다
- 인데놀
![image](https://github.com/nerd-animals/na-log/assets/144116866/b28ab7bd-c7af-4a33-898a-2bcbbaebd3e2)
    - 내과에서 면접 때문에 인데놀 처방
    - 먹기 전 식사 꼭 안 해도 됨
    - 면접 1-2시간 전
    - 2-3알 처방 받아서 모의면접 때 미리 부작용 확인
- 컨디션 관리
    - 정말 중요하다.
    - 스트레스로 전날 머리가 아팠는데 거의 아무것도 못했다.
    - 당일날 두통약도 먹어서 그나마 나았는데, 감기 같은 것 조심하자.
    - 장이 예민하시다면 전날 매운 음식은 절대 금물
- 그 외
    - 메일에 상세하게 설명되어 있을 것이니 모르는 부분 메일 참고

---

## ✨ 후기

### CT
- 1차보다 많이 못 풀었던 것 같다. (정확하게 얘기는 못하겠음)

### PT
- 확실히 준비한 만큼 잘 했고, 오프라인 스터디원분들도 많은 도움이 됐다고 해주셨다.

### 면접

- 면접위원 2분, 면접자 1명
- 자기소개 아주 조금 절었지만, 호흡을 가다듬고 차분히 이어나갔다.
- 차분한 분위기에서 긴장을 풀어주시려고 하셨다.
- 사람에 따라 압박 면접이라고 느낄 수도 있을 것 같다.
- 나는 면접 준비 도와주셨던 raccoon 형님과 다른 개발자 형님과 CS 관련 지식을 공유하고 와야겠다고 생각하니 압박이 덜 했던 것 같다.
- 인데놀 효과가 정말 좋았다. 긴장이 하나도 안됨.
- 오프라인 스터디에서 언어적/비언어적 습관을 피드백 받고, 생각지도 못한 꼬리질문을 준비할 수 있어서 실제 면접에서도 도움이 많이 됐다.
필수는 아니지만, 면접 경험이 없다면 꼭 해볼 것!

---

이해가 안 가거나 추가적으로 궁금한 사항 있으시다면 댓글 남겨주세요!

답변드릴 수 있는 선에서 최대한 답변드리도록 하겠습니다.

특히, 면접은 정성적 평가라서 연습을 하더라도 노력들이 많이 와닿진 않았습니다. 그래서 집중이 더 되지 않으시겠지만, 최종이니까 조금만 힘내셨으면 좋겠습니다. 면접도 똑같이 노력하고 연습한 만큼 실제 면접에서 큰 도움이 될 거라고 생각합니다.

![important](https://github.com/nerd-animals/na-log/assets/144116866/9338eb98-cada-4886-be39-ac36f7d01720)

<center>13기, 14기, 그 이후 기수도 파이팅!</center>11:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
12:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
13:{"display":"inline-block"}
14:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["jq-TnIxwHHfpB6j3Mi2Q1",[[["",{"children":["(contents)",{"children":["about",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(contents)",{"children":["about",{"children":["__PAGE__",{},["$L1",["$","main",null,{"className":"about-wrapper","children":[]}],null]]},["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","(contents)","children","about","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1a2bc1315f96f886.css","precedence":"next","crossOrigin":""}]]}]]},[null,[["$","div",null,{"className":"page-header-wrapper","children":["$","header",null,{"className":"page-header","children":[["$","div",null,{"className":"home-section","children":["$","$L4",null,{"className":"link","href":"/","children":"na-log"}]}],["$","div",null,{"className":"category-section","children":[["$","$L4",null,{"className":"link","href":"/write","children":"write"}],["$","$L4",null,{"className":"link","href":"/about","children":"about"}],["$","$L5",null,{"initialPosts":[{"frontMatter":{"title":"2024년 2회 정보처리기사 필기 합격 후기","summary":"2024년 2회 정보처리기사 비전공자 노베이스 최소 2주, 최대 4주 합격! 어떻게 공부했을까?","author":"otter","tags":["정보처리기사","비전공자","노베이스"],"date":"$D2024-06-12T00:00:00.000Z","slug":["certificate","eip","eip-pass-review"]},"content":"$6"},{"frontMatter":{"title":"2024년 첫 개정 SQLD 합격 후기","summary":"2024년 첫 개정 SQLD 비전공자 노베이스 3주 합격, 어떻게 공부했는지 알아보자!","author":"otter","tags":["SQLD","비전공자","노베이스"],"date":"$D2024-04-28T00:00:00.000Z","slug":["certificate","sqld","sqld-pass-review"]},"content":"$7"},{"frontMatter":{"title":"[Data Structure] Abstract Data Type, ADT","summary":"Abstract Data Type에 대한 생각을 정리한 글입니다.","author":"🦝 Raccoon","tags":["computer science"," abstract data type"," ADT"," data structure"],"date":"$D2024-06-15T00:00:00.000Z","slug":["computer-science","data-structure","abstract-data-type"]},"content":"$8"},{"frontMatter":{"title":"[프론트엔드] css vs sass(scss)?","summary":"css와 sass(scss), 이름은 비슷한데 어떤 차이가 있을까?","author":"otter","tags":["front-end","css","sass","scss"],"date":"2024-3-14","slug":["front-end","html-css","css-vs-scss"]},"content":"$9"},{"frontMatter":{"title":"[프론트엔드 기초] css란 무엇인가?","summary":"프론트엔드를 한다면 html과 더불어 같이 보게 되는 css, 이 css란 무엇일까요?","author":"otter","tags":["front-end","css"],"date":"2024-3-14","slug":["front-end","html-css","what-is-css"]},"content":"$a"},{"frontMatter":{"title":"[프론트엔드] css를 좀 더 깔끔하게! sass(scss)","summary":"작업이 커지면 커질수록 css도 복잡해요. \"sass(scss)\" 도와줘요!","author":"otter","tags":["front-end","css","sass","scss"],"date":"2024-3-14","slug":["front-end","html-css","what-is-scss"]},"content":"$b"},{"frontMatter":{"title":"하나의 state로 여러 개의 input/textarea 관리하기","summary":"state 하나에 많은 data들을 관리해보자!","author":"otter","tags":["front-end","react"],"date":"2024-3-26","slug":["front-end","react","managing-multiple-inputs-with-one-state"]},"content":"$c"},{"frontMatter":{"title":"…state와 (prev) ⇒ …prev의 차이","summary":"react state에서 prev는 무엇을 담당해줄까요?","author":"otter","tags":["front-end","react"],"date":"2024-3-26","slug":["front-end","react","the-difference-between-state-and-prev"]},"content":"$d"},{"frontMatter":{"title":"git 설치 방법 (for Mac)","summary":"개발자에게 가장 중요한 것들 중 하나인 git, 어떻게 설치할까요? (for Mac)","author":"otter","tags":["git","mac","homebrew"],"date":"2024-3-22","slug":["git","how-to-install-git-for-mac"]},"content":"$e"},{"frontMatter":{"title":"SSAFY 12기 비전공자 1차 CT/적성 합격 후기","summary":"SSAFY 12기, 11기 광탈과 비교한 비전공자 1차 CT/적성 합격의 이유는?","author":"otter","tags":["SSAFY","비전공자","합격 후기"],"date":"$D2024-06-27T00:00:00.000Z","slug":["ssafy","ssafy-first-pass-review"]},"content":"$f"},{"frontMatter":{"title":"SSAFY 12기 비전공자 2차 면접/인터뷰 합격 후기","summary":"SSAFY 12기, 비전공자 2차 면접/인터뷰 합격 후기 및 팁, 템플릿 공유!","author":"otter","tags":["SSAFY","비전공자","합격 후기"],"date":"$D2024-07-04T00:00:00.000Z","slug":["ssafy","ssafy-second-pass-review"]},"content":"$10"}]}]]}]]}]}],["$","main",null,{"className":"contents-wrapper","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","(contents)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]],null]]},[null,["$","html",null,{"lang":"ko","children":[["$","head",null,{"children":["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"}]}],["$","body",null,{"children":["$","div",null,{"className":"page-wrapper","children":[["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$11","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$12","children":"404"}],["$","div",null,{"style":"$13","children":["$","h2",null,{"style":"$14","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","div",null,{"className":"footer-wrapper","children":["$","footer",null,{"className":"page-footer","children":"copyright © 2024 by NerdAnimals"}]}]]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ef2b8d8a3b83e974.css","precedence":"next","crossOrigin":""}]],"$L15"]]]]
15:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"na-log"}],["$","meta","3",{"name":"description","content":"This is Developer Blog of Nerd-Animals Team"}],["$","meta","4",{"property":"og:title","content":"na-log"}],["$","meta","5",{"property":"og:description","content":"This is Developer Blog of Nerd-Animals Team"}],["$","meta","6",{"name":"twitter:card","content":"summary"}],["$","meta","7",{"name":"twitter:title","content":"na-log"}],["$","meta","8",{"name":"twitter:description","content":"This is Developer Blog of Nerd-Animals Team"}],["$","link","9",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"64x64"}]]
1:null
